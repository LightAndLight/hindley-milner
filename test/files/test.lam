class Eq a where {
  eq : a -> a -> Bool
    }

not : Bool -> Bool
not b = case b of {
  true -> false;
  _ -> true
  }

instance Eq Bool where {
  eq a b = case a of {
    true -> b;
    false -> not b
    }
}

asdf : forall a. Eq a => a -> Bool
asdf a = eq a a

test = asdf true

and a b = case a of {
  true -> b;
  _ -> false
  }

data List a = Nil | Cons a (List a)

instance Eq a => Eq (List a) where {
  eq = rec eq' la lb = case la of {
    Nil -> case lb of {
      Nil -> true;
      _ -> false
      };
    Cons a la' -> case lb of {
      Cons b lb' -> and (eq a b) (eq' la' lb');
      _ -> false
      }
  } in eq'
}

shouldBeFalse = eq (Cons true Nil) Nil
shouldBeTrue = eq (Cons true Nil) (Cons true Nil)
